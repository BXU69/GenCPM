fit.homog.assoc = update(fit.sat, .~.-alcohol:marijuana:cigarette)
summary(fit.homog.assoc)
tmp = factor(c("no", "yes"), levels=c("no", "yes"))
counts = c(279, 2, 43, 3, 456, 44, 538, 911)
drug.use = cbind(expand.grid(marijuana=tmp, cigarette=tmp, alcohol=tmp), counts)
drug.use
ftable(xtabs(counts ~ alcohol+cigarette+marijuana, data=, drug.use))
# saturated model (ACM)
fit.sat = glm(counts ~ (alcohol+cigarette+marijuana)^3, data=drug.use, family=poisson())
(fitted.sat = fitted(fit.sat))
summary(fit.sat)
# 0 residual df
deviance(fit.sat) # fits perfectly, negative due to computer precision
# homogeneous association model (AC, AM, CM)
fit.homog.assoc = update(fit.sat, .~.-alcohol:marijuana:cigarette)
summary(fit.homog.assoc)
# (GH, GI, HI)
fit.gh.gi.hi = glm(counts ~ (gender+information+health)^3 - gender:information:health, data=AIDS.opinion, family=poisson())
summary(fit.gh.gi.hi)
# Load necessary libraries
library(MASS)
# Create the dataset from Table 9.16
data <- data.frame(
Gender = rep(c("Male", "Female"), each = 4),
Information_Opinion = rep(c("Support", "Support", "Oppose", "Oppose"), times = 2),
Health_Opinion = rep(c("Support", "Oppose", "Support", "Oppose"), times = 2),
Count = c(76, 160, 6, 25, 114, 181, 11, 48)
)
# Convert categorical variables to factors
data$Gender <- as.factor(data$Gender)
data$Information_Opinion <- as.factor(data$Information_Opinion)
data$Health_Opinion <- as.factor(data$Health_Opinion)
# Fit loglinear models
model_GH_GI <- glm(Count ~ Gender * Health_Opinion + Gender * Information_Opinion, family = poisson, data = data)
model_GH_HI <- glm(Count ~ Gender * Health_Opinion + Health_Opinion * Information_Opinion, family = poisson, data = data)
model_GI_HI <- glm(Count ~ Gender * Information_Opinion + Health_Opinion * Information_Opinion, family = poisson, data = data)
model_GH_GI_HI <- glm(Count ~ Gender * Health_Opinion + Gender * Information_Opinion + Health_Opinion * Information_Opinion, family = poisson, data = data)
# Compare models using likelihood ratio tests
anova_GH_GI <- anova(model_GH_GI, model_GH_GI_HI, test = "Chisq")
anova_GH_HI <- anova(model_GH_HI, model_GH_GI_HI, test = "Chisq")
anova_GI_HI <- anova(model_GI_HI, model_GH_GI_HI, test = "Chisq")
# Display results
list(
GH_GI_vs_GH_GI_HI = anova_GH_GI,
GH_HI_vs_GH_GI_HI = anova_GH_HI,
GI_HI_vs_GH_GI_HI = anova_GI_HI
)
summary(model_GH_GI)
summary(fit.gh.gi)
# generate the data
opinion <- factor(c("support", "oppose"))
gender <- factor(c("male", "female"))
counts <- c(76, 160, 6, 25, 114, 181, 11, 48)
AIDS.opinion <- cbind(expand.grid(health=opinion, information=opinion, gender=gender), counts)
AIDS.opinion
ftable(xtabs(counts ~ gender+information+health, data=, AIDS.opinion))
# (GH, GI) model
fit.gh.gi <- glm(counts ~ gender + health + information + gender:health + gender:information, data=AIDS.opinion, family=poisson())
summary(fit.gh.gi)
pchisq(deviance(fit.gh.gi),df=df.residual(fit.gh.gi),lower=FALSE)
summary(model_GH_HI)
# (GH, HI) model
fit.gh.hi <- glm(counts ~ gender + health + information + gender:health + health:information, data=AIDS.opinion, family=poisson())
summary(fit.gh.hi)
# (GI, HI) model
fit.gi.hi <- glm(counts ~ gender + health + information + gender:information + health:information, data=AIDS.opinion, family=poisson())
summary(fit.gi.hi)
summary(model_GI_HI)
summary(model_GH_GI_HI)
# (GI, HI) model
fit.gi.hi <- glm(counts ~ gender + health + information + gender:information + health:information, data=AIDS.opinion, family=poisson())
summary(fit.gi.hi)
# (GH, GI, HI)
fit.gh.gi.hi = glm(counts ~ (gender+information+health)^3 - gender:information:health, data=AIDS.opinion, family=poisson())
summary(fit.gh.gi.hi)
AIDS.opinion
ftable(xtabs(counts ~ gender+information+health, data=, AIDS.opinion))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 106, 23, 31, 140, 138, 13, 31, 42, 79, 18, 80, 52, 106, 35, 79)
MBTI <- cbind(expand.grid(JP=jp, EI=ei, TF=tf, SN=sn), counts)
ftable(xtabs(counts ~ JP+EI+TF+SN, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 106, 23, 31, 140, 138, 13, 31, 42, 79, 18, 80, 52, 106, 35, 79)
MBTI <- cbind(expand.grid(JP=jp, EI=ei, SN=sn, TF=tf), counts)
ftable(xtabs(counts ~ JP+EI+TF+SN, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 106, 23, 31, 140, 138, 13, 31, 42, 79, 18, 80, 52, 106, 35, 79)
MBTI <- cbind(expand.grid(JP=jp, EI=ei, SN=sn, TF=tf), counts)
ftable(xtabs(counts ~ JP+EI+SN+TF, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(JP=jp, EI=ei, SN=sn, TF=tf), counts)
ftable(xtabs(counts ~ JP+EI+SN+TF, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 106, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
tf <- factor(c("T", "F"), levels = c("T", "F"))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 106, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 106, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"), levels = c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"), levels = c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"), levels = c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"), levels = c("J", "P"))
counts <- c(77, 140, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"), levels = c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"), levels = c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
counts <- c(77, 140, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp))
MBTI
?expand.grid()
MBTI <- cbind(expand.grid(EI=ei, SN=sn, TF=tf, JP=jp), counts)
MBTI
MBTI <- cbind(expand.grid(JP=jp, TF=tf, SN=sn, EI=ei), counts)
MBTI
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
ei <- factor(c("E", "I"), levels = c("E", "I"))
sn <- factor(c("S", "N"), levels = c("S", "N"))
tf <- factor(c("T", "F"), levels = c("T", "F"))
jp <- factor(c("J", "P"), levels = c("J", "P"))
counts <- c(77, 42, 106, 79, 23, 18, 31, 80, 140, 52, 138, 106, 13, 35, 31, 79)
MBTI <- cbind(expand.grid(JP=jp, TF=tf, SN=sn, EI=ei), counts)
ftable(xtabs(counts ~ EI+SN+TF+JP, data=, MBTI))
fit.homo = glm(counts ~ (EI+SN+TF+JP)^4, data=MBTI, family=poisson())
summary(fit.homo)
fit.homo = glm(counts ~ (EI+SN+TF+JP)^4 - (EI+SN+TF+JP)^3,
data=MBTI, family=poisson())
summary(fit.homo)
fit.homo = glm(counts ~ (EI+SN+TF+JP)^3,
data=MBTI, family=poisson())
summary(fit.homo)
fit.homo = glm(counts ~ (EI+SN+TF+JP)^2,
data=MBTI, family=poisson())
summary(fit.homo)
exp(-1.5075)
exp(-0.9382)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("devtools")
library(devtools)
library(roxygen2)
?getwd()
getwd()
setwd("/Users/celestine/Desktop/GenCPM")
devtools::create("GenCPM")
?data.table
getwd()
devtools::document()
setwd("/Users/celestine/Desktop/GenCPM/GenCPM")
devtools::document()
getwd()
?create
getwd()
setwd("/Users/celestine/Desktop/GenCPM/GenCPM")
document()
document()
setwd("./GenCPM")
document()
install.packages("ComplexHeatmap")
load("~/Desktop/GenCPM/shen_268_network_labels.RData")
View(shen_268_network_labels)
load("~/Desktop/GenCPM/GenCPM/R/sysdata.rda")
load("~/Desktop/GenCPM/GenCPM/R/sysdata.rda")
load("~/Desktop/GenCPM/shen_268_network_labels.RData")
?use_data
usethis::use_data(shen_268_network_labels, internal = T)
setwd("./GenCPM")
usethis::use_data(shen_268_network_labels, internal = T)
?use_vignette
setwd("./GenCPM")
use_vignettee("introduction")
use_vignette("introduction")
devtools::install(GenCPM)
devtools::install("GenCPM")
library(GenCPM)
setwd("./GenCPM")
usethis::use_package("ComplexHeatmap")
devtools::document()
devtools::install("GenCPM")
load("~/Desktop/GenCPM/linear1588.RData")
library(GenCPM)
heatmap.GenCPM(linear1588)
traceback()
View(linear1588)
assess.GenCPM(linear1588)
?assess.GenCPM
assess.GenCPM(linear1588, edge = "combined")
assess.GenCPM(linear1588, edge = "combined")
heatmap.GenCPM(linear1588)
traceback
traveback()
traceback()
heatmap.GenCPM(linear1588)
?heatmap.GenCPM
heatmap.GenCPM(linear1588)
traceback()
?load
library(GenCPM)
devtools::install("GenCPM")
library(GenCPM)
heatmap.GenCPM(linear1588)
load("~/Desktop/GenCPM/GenCPM/R/sysdata.rda")
load("~/Desktop/GenCPM/linear1588.RData")
assess.GenCPM(linear1588, edge = "combined")
heatmap.GenCPM(linear1588)
library(GenCPM)
heatmap.GenCPM(linear1588)
devtools::install("GenCPM")
library(GenCPM)
heatmap.GenCPM(linear1588)
traceback()
hmap.GenCPM <- function(cpm, foldThreshold = .5){
nfold <- length(cpm$positive_edges)
pos_number <- unlist(cpm$positive_edges)
neg_number <- unlist(cpm$negative_edges)
pos_count <- as.data.frame(table(pos_number))
neg_count <- as.data.frame(table(neg_number))
# add the threshold criteria here
pos_count <- pos_count[pos_count$Freq >= foldThreshold*nfold,]
neg_count <- neg_count[neg_count$Freq >= foldThreshold*nfold,]
if(nrow(pos_count) == 0 && nrow(neg_count) == 0){
return("there is no edge selected at this foldThresh.")
}else{
pos_prop <- pos_count$Freq/sum(pos_count$Freq)
neg_prop <- neg_count$Freq/sum(neg_count$Freq)
pos_count$pos_number <- as.numeric(as.character(pos_count$pos_number))
neg_count$neg_number <- as.numeric(as.character(neg_count$neg_number))
# calculate the postion of each edge
pos_position1 = ceiling(pos_count$pos_number / 268)
pos_position2 = pos_count$pos_number - (ceiling(pos_count$pos_number / 268) - 1) * 268
neg_position1 = ceiling(neg_count$neg_number / 268)
neg_position2 = neg_count$neg_number - (ceiling(neg_count$neg_number / 268) - 1) * 268
# load the shen_268_network_labels and 10-node network labels
# load("shen_268_network_labels.RData")
node268 <- shen_268_network_labels$`10-node_network`
# match position with 10-node labels
pos_position <- data.frame("position1"=node268[pos_position1], "position2"=node268[pos_position2], "proportion"=pos_prop)
neg_position <- data.frame("position1"=node268[neg_position1], "position2"=node268[neg_position2], "proportion"=neg_prop)
# set the label of 10-node network
# label <- c("Medial Frontal", "Fronto-parietal", "Default Mode", "Motor",
# "Visual I", "Visual II", "Visual Association", "Limbic", "Basal Ganglia", "Cerebellum")
label <- c("MG","FP","DM","MOT","V1","V2","VA","LIM","BG","CER")
pos_position$position1 <- label[pos_position$position1]
pos_position$position2 <- label[pos_position$position2]
neg_position$position1 <- label[neg_position$position1]
neg_position$position2 <- label[neg_position$position2]
# get the upper triangle part of the frequancy matrix
# for positive edges
pp <- data.frame(matrix(ncol = 10, nrow = 10))
colnames(pp) <- label
row.names(pp) <- label
for (i in 1:10){
for (j in 1:10){
ppe <- sum(pos_position$proportion[which(pos_position$position1==label[i]&pos_position$position2==label[j])])
if(length(ppe)!=0){
pp[i,j] <- ppe
}else{
pp[i,j] <- 0
}
}
}
pp <- data.matrix(t(pp)+pp)
diag(pp) <- diag(pp)/2
# for negative edges
np <- data.frame(matrix(ncol = 10, nrow = 10))
colnames(np) <- label
row.names(np) <- label
for (i in 1:10){
for (j in 1:10){
npe <- sum(neg_position$proportion[which(neg_position$position1==label[i]&neg_position$position2==label[j])])
if(length(npe)!=0){
np[i,j] <- npe
}else{
np[i,j] <- 0
}
}
}
np <- data.matrix(np+t(np))
diag(np) <- diag(np)/2
np <- -np
# draw the heatmap
max_pos <- max(unique(pp))
max_neg <- abs(min(unique(np)))
max <- max(max_pos, max_neg)
col1 = colorRamp2(c(-max, 0, max), c("blue","white", "red"))
ht1 <- Heatmap(pp, rect_gp = gpar(type = "none"), col=col1,
width = 10*unit(10, "mm"),
height = 10*unit(10, "mm"),
heatmap_legend_param = list(title=" ",at = c(-max, max),
labels = c("negative", "positive"),
direction = "horizontal",
legend_width = unit(8, "cm")),
cluster_rows = FALSE, cluster_columns = FALSE,
row_names_side = "left",
column_names_rot = 45,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = "dimgray"))
}
})
ht2 <- Heatmap(np, rect_gp = gpar(type = "none"), col=col1,
width = 10*unit(10, "mm"),
height = 10*unit(10, "mm"),
cluster_rows = FALSE, cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_side = "top",
show_heatmap_legend = FALSE,
column_names_rot = 45,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i <= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = "dimgray"))
}
}
)
draw(ht1 + ht2, ht_gap = unit(-70, "mm"), heatmap_legend_side = "bot")
}
}
hmap.GenCPM(linear1588)
load("~/Desktop/GenCPM/GenCPM/R/sysdata.rda")
hmap.GenCPM(linear1588)
?colorRamp
?colorRamp2
library(circlize)
hmap.GenCPM(linear1588)
traceback()
?colorspace
devtools::install("GenCPM")
library(GenCPM)
heatmap.GenCPM(linear1588)
install.packages("colorspace")
install.packages("colorspace")
hmap.GenCPM(linear1588)
library(circlize)
hmap.GenCPM(linear1588)
library(ComplexHeatmap)
hmap.GenCPM(linear1588)
knitr::opts_chunk$set(echo = TRUE)
devtools::install("GenCPM")
library(GenCPM)
heatmap.GenCPM(linear1588)
heatmap.GenCPM(linear1588)
assess.GenCPM(linear1588, edge = "combined")
heatmap.GenCPM(linear1588)
?train.GenCPM
setwd("./GenCPM")
document()
# install.packages("devtools")
library(devtools)
library(roxygen2)
setwd("./GenCPM")
document()
?train.GenCPM
setwd("./GenCPM")
document()
?train.GenCPM
?glm
?survival
?train.GenCPM
setwd("./GenCPM")
document()
?heatmap.GenCPM
setwd("./GenCPM")
usethis::use_data(shen_268_network_labels, internal = T)
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
?assess.GenCPM
setwd("./GenCPM")
document()
?linear.GenCPM
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
?logit.GenCPM
?linear.regularized.GenCPM
setwd("./GenCPM")
document()
?linear.GenCPM
?logit.GenCPM
?logit.regularized.GenCPM
setwd("./GenCPM")
document()
?linear.regularized.GenCPM
setwd("./GenCPM")
document()
library(GenCPM)
heatmap.GenCPM(linear1588)
setwd("./GenCPM")
document()
?cox.GenCPM
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
?cox.regularized.GenCPM
setwd("./GenCPM")
document()
?multinom.GenCPM
setwd("./GenCPM")
document()
?train.GenCPM
?assess.GenCPM
?heatmap.GenCPM
?linear.GenCPM
?linear.regularized.GenCPM
?logit.GenCPM
?logit.regularized.GenCPM
?multinom.GenCPM
?multinom.regularized.GenCPM
?cox.GenCPM
?cox.regularized.GenCPM
devtools::install_github("BXU69/GenCPM")
git config --global user.name "Baijia XU"
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
library(usethis)
document()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(roxygen2)
setwd("./GenCPM")
document()
setwd("./GenCPM")
document()
# install.packages("devtools")
library(devtools)
library(roxygen2)
setwd("./GenCPM")
document()
knitr::opts_chunk$set(echo = TRUE)
# install.packages("devtools")
library(devtools)
library(roxygen2)
setwd("./GenCPM")
document()
library(devtools)
library(roxygen2)
knitr::opts_chunk$set(echo = TRUE)
setwd("./GenCPM")
document()
